name: CI/CD for Next.js App

on:
  push:
    branches: [main] # main 브랜치에 push 될 때만 실행
  pull_request:
    branches: [main] # PR 시에는 CI만 실행

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run tests
        run: npm test
        env:
          CI: true

      - name: Build application
        run: npm run build
        env:
          DEPLOY_URL: ${{ secrets.DEPLOY_URL }}
          DEVELOP_URL: ${{ secrets.DEVELOP_URL }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXT_PUBLIC_DEPLOY_URL: ${{ secrets.NEXT_PUBLIC_DEPLOY_URL }}
          NEXT_PUBLIC_DEVELOP_URL: ${{ secrets.NEXT_PUBLIC_DEVELOP_URL }}
          NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          NEXT_PUBLIC_KAKAO_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}

      - name: Archive production artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # 필요한 파일들만 압축 (node_modules 제외)
          tar -czf build-artifact.tar.gz \
            .next \
            public \
            package.json \
            package-lock.json \
            next.config.js \
            $([ -f .env.production ] && echo .env.production || true) \
            $([ -f .env.local ] && echo .env.local || true)

      - name: Upload build artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build-artifact.tar.gz
          retention-days: 1

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    # main 브랜치 push일 때만 배포 실행
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .

      - name: Copy artifact to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: 'build-artifact.tar.gz'
          target: '/tmp/'
          timeout: 30s

      - name: Deploy and restart app on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          timeout: 60s
          script: |
            set -e

            # 프로젝트 디렉토리로 이동
            cd ${{ secrets.PROJECT_PATH }}

            echo "=== Backup current version ==="
            if [ -d ".next" ]; then
              mv .next .next.backup.$(date +%Y%m%d_%H%M%S) || true
            fi

            echo "=== Extracting new build ==="
            tar -xzf /tmp/build-artifact.tar.gz -C .
            rm -f /tmp/build-artifact.tar.gz

            echo "=== Installing production dependencies ==="
            npm ci --only=production --silent

            echo "=== Setting up environment ==="
            # 환경변수 파일이 없다면 생성 (선택사항)
            if [ ! -f ".env.production" ] && [ ! -f ".env.local" ]; then
              echo "Warning: No environment file found. Make sure environment variables are set properly."
            fi

            echo "=== Managing PM2 process ==="
            PM2_APP_NAME="${{ secrets.PM2_APP_NAME }}"

            # PM2가 설치되어 있는지 확인
            if ! command -v pm2 &> /dev/null; then
              echo "PM2 not found. Installing PM2..."
              npm install -g pm2
            fi

            # PM2 프로세스 상태 확인 및 재시작
            if pm2 list | grep -q "$PM2_APP_NAME"; then
              echo "Reloading existing PM2 process: $PM2_APP_NAME"
              pm2 reload "$PM2_APP_NAME" --update-env
            else
              echo "Starting new PM2 process: $PM2_APP_NAME"
              # Next.js 프로덕션 모드로 시작
              pm2 start npm --name "$PM2_APP_NAME" -- start
            fi

            # PM2 프로세스 상태 확인
            pm2 list
            pm2 logs "$PM2_APP_NAME" --lines 10

            echo "=== Deployment completed successfully! ==="
